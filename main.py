# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'bhavananew.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *


import sqlite3
cricket=sqlite3.connect("stats.db")
c=cricket.cursor()



class Ui_MainWindow(QtWidgets.QWidget):
    
    def new(self):
        text,ok= QtWidgets.QInputDialog.getText(self,'New Team',"Enter your Team Name")
        if ok:
            teams=[teams[0] for teams in c.execute("Select distinct name from teams")]
            if text in teams:
                   #self.label_8.setText(text)
                   self.error_dialog =QtWidgets.QErrorMessage()
                   self.error_dialog.setWindowTitle("Name Error")
                   self.error_dialog.showMessage(text+"is already taken .Please try another one")
                   self.label_8.setText("")
            else:
                   self.label_8.setText(text)
                   self.listWidget_2.clear()
                   self.getPlayers()
                   self.team=[]
                   self.wkcount=0
                   self.batcount=0
                   self.bowcount=0
                   self.arcount=0
                   self.points_used=0
                   self.points_avail=1000
                   self.label_10.setText("0")
                   self.label_11.setText("0")
                   self.label_12.setText("0")
                   self.label_13.setText("0")
                   self.label_14.setText("1000")
                   self.label_15.setText("0")
                   self.team_name=text
                   #self.updateLabels()
    def getPlayers(self):
        self.bat=[player[0] for player in c.execute("select player from stats where ctg='BAT'")]
        self.bow=[player[0] for player in c.execute("select player from stats where ctg='BWL'")]
        self.ar=[player[0] for player in c.execute("select player from stats where ctg='AR'")]
        self.wk=[player[0] for player in c.execute("select player from stats where ctg='WK'")]

    def menuFunction(self,action):
        txt=(action.text())
        if txt=="NEW Team":
            self.new()
        elif txt=="SAVE Team":
            self.file_save()
        elif txt =="OPEN Team":
            self.team_open()
        elif txt=="Quit":
            self.quit_system()
        elif txt=="EVALUATE Team":
            try:
                from evaluate import Ui_Dialog
                Dialog = QtWidgets.QDialog()
                ui = Ui_Dialog()
                ui.setupUi(Dialog)
                Dialog.exec()
            except Exception as e:
                print(e)
        
    def isToggled(self,category):
        try :
          if category.isChecked()==True:
             #sql="SELECT ctg from stats where player='"+category.text()+"'"
             #players=[player[0 for player in c.execute(sql)]
             if category.text() =="BAT":
                 self.listWidget.clear()
                 self.listWidget.addItems(self.bat)
             elif category.text() =="BWL":
                 self.listWidget.clear()
                 self.listWidget.addItems(self.bow)
             elif category.text()=="AR":
                 self.listWidget.clear()
                 self.listWidget.addItems(self.ar)
             elif category.text()=="WK":
                 self.listWidget.clear()
                 self.listWidget.addItems(self.wk)
             self.listWidget.sortItems()
        except:
                   self.error_dialog =QtWidgets.QErrorMessage()
                   self.error_dialog.setWindowTitle(" Error")
                   self.error_dialog.showMessage("Please select NEW Team")
                   self.radioButton.setChecked(False)
            
                 
              
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1002, 709)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet("background-color: lightgreen")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 30, 971, 91))
        self.widget.setObjectName("widget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.widget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(20, 20, 941, 71))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayoutWidget.setStyleSheet("background-color: pink")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_5 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout.addWidget(self.label_5)
        self.label_10 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout.addWidget(self.label_10)
        self.label_10.setStyleSheet("color:blue")
        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout.addWidget(self.label_4)
        self.label_11 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout.addWidget(self.label_11)
        self.label_11.setStyleSheet("color:blue")
        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.label_12 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout.addWidget(self.label_12)
        self.label_12.setStyleSheet("color:blue")
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.label_13 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout.addWidget(self.label_13)
        self.label_13.setStyleSheet("color:blue")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(30, 0, 121, 19))
        self.label.setObjectName("label")
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setGeometry(QtCore.QRect(50, 200, 431, 441))
        self.widget_2.setObjectName("widget_2")
        self.listWidget = QtWidgets.QListWidget(self.widget_2)
        self.listWidget.setGeometry(QtCore.QRect(0, 50, 431, 391))
        self.listWidget.setObjectName("listWidget")

        self.listWidget.itemDoubleClicked.connect(self.removelist1)

        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.widget_2)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(0, 0, 431, 51))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayoutWidget_2.setStyleSheet("background-color: skyblue")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.radioButton = QtWidgets.QRadioButton(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton.setFont(font)
        self.radioButton.setObjectName("radioButton")
        self.horizontalLayout_2.addWidget(self.radioButton)
        self.radioButton_3 = QtWidgets.QRadioButton(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setObjectName("radioButton_3")
        self.horizontalLayout_2.addWidget(self.radioButton_3)
        self.radioButton_2 = QtWidgets.QRadioButton(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.horizontalLayout_2.addWidget(self.radioButton_2)
        self.radioButton_4 = QtWidgets.QRadioButton(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setObjectName("radioButton_4")
        self.horizontalLayout_2.addWidget(self.radioButton_4)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(50, 160, 221, 19))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.widget_3 = QtWidgets.QWidget(self.centralwidget)
        self.widget_3.setGeometry(QtCore.QRect(490, 200, 431, 441))
        self.widget_3.setObjectName("widget_3")
        self.widget_3.setStyleSheet("background-color: skyblue")
        self.listWidget_2 = QtWidgets.QListWidget(self.widget_3)
        self.listWidget_2.setGeometry(QtCore.QRect(-5, 50, 441, 391))
        self.listWidget_2.setObjectName("listWidget_2")
        self.listWidget_2.setStyleSheet("background-color: white")
        self.listWidget.setStyleSheet("background-color: white")

        self.listWidget_2.itemDoubleClicked.connect(self.removelist2)
        self.label_7 = QtWidgets.QLabel(self.widget_3)
        self.label_7.setGeometry(QtCore.QRect(70, 20, 121, 20))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.widget_3)
        self.label_8.setGeometry(QtCore.QRect(200, 20, 151, 19))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(520, 160, 181, 19))
        self.label_9.setObjectName("label_9")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(210, 160, 68, 19))
        self.label_14.setObjectName("label_14")
        self.label_14.setStyleSheet("color:blue")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(650, 160, 68, 19))
        self.label_15.setObjectName("label_15")
        self.label_15.setStyleSheet("color:blue")
        self.widget.raise_()
        self.widget_2.raise_()
        self.label_6.raise_()
        self.widget_3.raise_()
        self.label_9.raise_()
        self.label_2.raise_()
        self.label_14.raise_()
        self.label_15.raise_()
        
        self.label_10.setFont(font)
        self.label_11.setFont(font)
        self.label_12.setFont(font)
        self.label_13.setFont(font)
        self.label_14.setFont(font)
        self.label_15.setFont(font)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1002, 31))
        self.menubar.setObjectName("menubar")
        self.menubar.setStyleSheet("color: white")
        self.menubar.setStyleSheet("background-color: brown")
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setObjectName("menuManage_Teams")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNEW_Team = QtWidgets.QAction(MainWindow)
        self.actionNEW_Team.setObjectName("actionNEW_Team")
        self.actionOPEN_Team = QtWidgets.QAction(MainWindow)
        self.actionOPEN_Team.setObjectName("actionOPEN_Team")

        #save_menu
        self.actionSAVE_Team = QtWidgets.QAction(MainWindow)
        self.actionSAVE_Team.setObjectName("actionSAVE_Team")
        #self.actionSave_Team.setShortcut("Ctrl+S")
        

        
        self.actionEVALUATE_Team = QtWidgets.QAction(MainWindow)
        self.actionEVALUATE_Team.setObjectName("actionEVALUATE_Team")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.menuManage_Teams.addAction(self.actionNEW_Team)
        self.menuManage_Teams.addAction(self.actionOPEN_Team)
        self.menuManage_Teams.addAction(self.actionSAVE_Team)
        self.menuManage_Teams.addAction(self.actionEVALUATE_Team)
        self.menuManage_Teams.addAction(self.actionQuit)
        self.menubar.addAction(self.menuManage_Teams.menuAction())

        self.radioButton.toggled.connect(lambda:self.isToggled(self.radioButton))
        self.radioButton_2.toggled.connect(lambda:self.isToggled(self.radioButton_2))
        self.radioButton_3.toggled.connect(lambda:self.isToggled(self.radioButton_3))
        self.radioButton_4.toggled.connect(lambda:self.isToggled(self.radioButton_4))
        
        self.menuManage_Teams.triggered[QtWidgets.QAction].connect(self.menuFunction)
        

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    

    def removelist1(self,item):
           sql="select value from stats where player='"+item.text()+"'"
           m=[points[0] for points in c.execute(sql)]
          
           if  len(self.team) >= 11:
                    self.error_dialog=QtWidgets.QErrorMessage()
                    self.error_dialog.setWindowTitle("Error")
                    self.error_dialog.showMessage("More than 11 players are not allowed in a team.")
           elif self.points_avail-m[0]<=0:
                    self.error_dialog=QtWidgets.QErrorMessage()
                    self.error_dialog.setWindowTitle("Error")
                    self.error_dialog.showMessage("Insufficient Points")
        
           else:
              if self.radioButton.isChecked()== True:
              
                 if (self.batcount)>=5 :
                    self.error_dialog=QtWidgets.QErrorMessage()
                    self.error_dialog.setWindowTitle("Error")
                    self.error_dialog.showMessage("You need to select atleast 3 batsmen.")
                 else:
                     self.listWidget.takeItem(self.listWidget.row(item))
                     self.team.append(item.text())
                     self.listWidget_2.addItem(item.text())
                     self.bat.remove(item.text())
                     self.batcount=self.batcount+1
                     lname1=str(self.batcount)
                     self.label_10.setText(lname1)
                     self.call_for_points(item.text())
                     self.label_14.setText(str(self.points_avail))
                     self.label_15.setText(str(self.points_used))
                     
              elif self.radioButton_3.isChecked()== True:
                 if self.bowcount >=5 :
                   self.error_dialog=QtWidgets.QErrorMessage()
                   self.error_dialog.setWindowTitle("Error")
                   self.error_dialog.showMessage("You need to select atleast 3 bowlers.")
                 else:
                   self.listWidget.takeItem(self.listWidget.row(item))
                   self.team.append(item.text())
                   self.listWidget_2.addItem(item.text())
                   self.bow.remove(item.text())
                   self.bowcount=self.bowcount+1
                   lname2=str(self.bowcount)
                   self.label_11.setText(lname2)
                   self.call_for_points(item.text())
                   self.label_14.setText(str(self.points_avail))
                   self.label_15.setText(str(self.points_used))
              elif self.radioButton_2.isChecked()== True:
                   self.listWidget.takeItem(self.listWidget.row(item))
                   self.team.append(item.text())
                   self.listWidget_2.addItem(item.text())
                   self.ar.remove(item.text())
                   self.arcount=self.arcount+1
                   lname3=str(self.arcount)
                   self.label_12.setText(lname3)
                   self.call_for_points(item.text())
                   self.label_14.setText(str(self.points_avail))
                   self.label_15.setText(str(self.points_used))
              elif self.radioButton_4.isChecked()== True:
                  if   self.wkcount >=1:
                         self.error_dialog=QtWidgets.QErrorMessage()
                         self.error_dialog.setWindowTitle("Error")
                         self.error_dialog.showMessage("You can't select more than one wicket-keeper")
                  else:
                    self.listWidget.takeItem(self.listWidget.row(item))
                    self.team.append(item.text())
                    self.listWidget_2.addItem(item.text())
                    self.wk.remove(item.text())
                    self.wkcount=self.wkcount+1
                    lname4=str(self.wkcount)
                    self.label_13.setText(lname4)
                    self.call_for_points(item.text())
                    self.label_14.setText(str(self.points_avail))
                    self.label_15.setText(str(self.points_used))
              
    def removelist2(self,item):
          self.listWidget_2.takeItem(self.listWidget_2.row(item))
          sql="select ctg from stats where player='"+item.text()+"'"
          array=[player[0] for player in c.execute(sql)]
          if array[0]=="BAT":
                if self.radioButton.isChecked()==True:
                    self.listWidget.addItem(item.text())
                self.bat.append(item.text())
                self.team.remove(item.text())
                self.batcount-=1
                lname5=str(self.batcount)
                self.label_10.setText(lname5)
                self.call_for_points_2(item.text())
          elif array[0]=="BWL":
                if self.radioButton_3.isChecked()==True:
                    self.listWidget.addItem(item.text())
                self.bow.append(item.text())
                self.team.remove(item.text())
                self.bowcount-=1
                lname6=str(self.bowcount)
                self.label_11.setText(lname6)
                self.call_for_points_2(item.text())
          elif array[0]=="AR":
                if self.radioButton_2.isChecked()==True:
                    self.listWidget.addItem(item.text())
                self.ar.append(item.text())
                self.team.remove(item.text())
                self.arcount-=1
                lname7=str(self.arcount)
                self.label_12.setText(lname7)
                self.call_for_points_2(item.text())
          elif array[0]=="WK":
                if self.radioButton_4.isChecked()==True:
                    self.listWidget.addItem(item.text())
                    self.team.remove(item.text())
                    self.wk.append(item.text())
                    self.wkcount-=1
                    lname8=str(self.wkcount)
                    self.label_13.setText(lname8)
                    self.call_for_points_2(item.text())
                    
    def call_for_points(self,plname):
        sql="select value from stats where player='"+plname+"'"
        m=[points[0] for points in c.execute(sql)]
        self.points_used+=m[0]
        self.points_avail-=m[0]

    def call_for_points_2(self,plname):
        sql="select value from stats where player='"+plname+"'"
        m=[points[0] for points in c.execute(sql)]
        self.points_used-=m[0]
        self.points_avail+=m[0]
        self.label_14.setText(str(self.points_avail))
        self.label_15.setText(str(self.points_used))
         
    def file_save(self):
        
        
        try:
            if(self.batcount+self.bowcount+self.arcount+self.wkcount)!=11:
                self.error_dialog=QtWidgets.QErrorMessage()
                self.error_dialog.setWindowTitle("Error")
                self.error_dialog.showMessage("Insufficient Players")
            else:
                for i in range(11):
                    sql="select value from stats where  player='"+self.team[i]+"'"
                    val=[val[0] for val in c.execute(sql)]
                    try:
                        c.execute("insert into teams (name,players,value) values(?,?,?);",(self.team_name,self.team[i],val[0]))
                        cricket.commit()
                    except Exception as e:
                                  print(e)
        except Exception as e:
                                  
                self.error_dialog=QtWidgets.QErrorMessage()
                self.error_dialog.setWindowTitle("Error")
                self.error_dialog.showMessage("Unable to save a team")


    def team_open(self):
                 #all_teams=[]
        
                sql="select  distinct name from teams"
                allnames=[all_teams[0] for all_teams in c.execute(sql)]
                item,ok=QtWidgets.QInputDialog.getItem(self,"Select Team","Teams",allnames,0,False)

                if ok:
                     sql="select distinct players from teams where name='"+item+"'"
                     self.team=[team[0] for team in c.execute(sql)]
                     self.getPlayers()
                     self.batc=len(self.bat)
                     self.bowc=len(self.bow)
                     self.arc=len(self.ar)
                     self.wkc=len(self.wk)
                     self.bat=list(set(self.bat)-set(self.team))
                     self.bow=list(set(self.bow)-set(self.team))
                     self.ar=list(set(self.ar)-set(self.team))
                     self.wk=list(set(self.wk)-set(self.team))
                     self.batcount=self.batc-len(self.bat)
                     self.bowcount=self.bowc-len(self.bow)
                     self.arcount=self.arc-len(self.ar)
                     self.wkcount=self.wkc-len(self.wk)
                     self.label_10.setText(str(self.batcount))
                     self.label_11.setText(str(self.bowcount))
                     self.label_12.setText(str(self.arcount))
                     self.label_13.setText(str(self.wkcount))
                     self.points_used=0
                     self.points_avail=1000
                     self.listWidget_2.clear()
                     self.listWidget_2.addItems(self.team)
                     for i in range (11):
                         sql="select value from stats where player='"+self.team[i]+"'"
                         val=[val[0] for val in c.execute(sql)]
                         self.points_used+=val[0]
                         self.points_avail-=val[0]
                    
                     self.label_14.setText(str(self.points_avail))
                     self.label_15.setText(str(self.points_used))
                     self.label_8.setText(item)
                     
    def quit_system():
       sys.exit()
                    
                         
                     
                     
                
                
                
        


       
                    
        
   

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_5.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Batsmen (BAT) </span></p></body></html>"))
        self.label_10.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#0084ff;\">##</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Bowlers (BOW) </span></p></body></html>"))
        self.label_11.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#0084ff;\">##</span></p></body></html>"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Allrounders (AR)</span><span style=\" font-size:9pt; font-weight:600; color:#0084ff;\"/></p></body></html>"))
        self.label_12.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#0084ff;\">##</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p>Wicket-Keeper (WK) </p></body></html>"))
        self.label_13.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#0084ff;\">##</span></p></body></html>"))
        self.label.setText(_translate("MainWindow", "Your Selections"))
        self.radioButton.setText(_translate("MainWindow", "BAT"))
        self.radioButton_3.setText(_translate("MainWindow", "BWL"))
        self.radioButton_2.setText(_translate("MainWindow", "AR"))
        self.radioButton_4.setText(_translate("MainWindow", "WK"))
        self.label_6.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">Points Available</span></p></body></html>"))
        self.label_7.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">Team Name</span></p></body></html>"))
        self.label_8.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#0084ff;\">Displayed here</span></p></body></html>"))
        self.label_9.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">Points Used </span></p></body></html>"))
        self.label_14.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#0084ff;\">####</span></p></body></html>"))
        self.label_15.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600; color:#0084ff;\">####</span></p></body></html>"))
        self.menuManage_Teams.setTitle(_translate("MainWindow", "Manage Teams"))
        self.actionNEW_Team.setText(_translate("MainWindow", "NEW Team"))
        self.actionOPEN_Team.setText(_translate("MainWindow", "OPEN Team"))
        self.actionSAVE_Team.setText(_translate("MainWindow", "SAVE Team"))
        self.actionEVALUATE_Team.setText(_translate("MainWindow", "EVALUATE Team"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
